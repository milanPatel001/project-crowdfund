//server

//http module to create http server, it's a part of node.js and uses tcp connection
const http = require("http");
//socket.io for real time bidirectional communication between server and client, also uses tcp
const socketIO = require("socket.io");

//creating http server
const server = http.createServer();

//initialize socket.io and passing http server as argument to socketIO
//which gives io instant which can be used to listen for incoming socket connection and events
const ioserver = socketIO(server);

//Port number that server listens for incoming connection
const port = 65535;

const values = [0, 0, 0, 0, 0];
const funds = [
  "ABC Corp.",
  "Cancer fund",
  "Saving Environment Fund",
  "Scam Fund",
  "Education Fund",
];

const clients = new Map();
let idIndex = 0;
const idCheck = [false, false, false, false]; //used in checking for free ids (supports only 4 ids for now)

ioserver.on("connection", (socket) => {
  assignClientId(socket.id);
  console.log("Client", clients.get(socket.id), "is connected.");

  //this is to handle any communication with the client
  //when a server listens for a event "message" by client it receives the message
  //and emit to all the clients the server is connected to
  socket.on("new message", (message) => {
    console.log("Message received:", message);

    ioserver.emit("new message", message);
  });

  //listens for any donations by clients and then stores them
  socket.on("donate", (donationData) => {
    console.log(
      "Client",
      clients.get(socket.id),
      "donated $",
      donationData.amount,
      "to",
      funds[donationData.index]
    );
    values[donationData.index] += donationData.amount;
    //ioserver.emit("donation", value);
  });

  socket.on("donation amount request", (data) => {
    socket.emit("donation amount value", { value: values[data.index] });
  });

  socket.on("quit", () => {
    socket.disconnect();
  });

  //Server listens for the disconnect event
  //when disconnects it closes tcp connection
  socket.on("disconnect", () => {
    console.log("Client", clients.get(socket.id), "just disconnected.");
    idCheck[clients.get(socket.id) - 1] = false;
    clients.delete(socket.id);
  });
});

//it starts the server that listen to a spicified port
server.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

function assignClientId(id) {
  let count = 0;
  while (idCheck[idIndex]) {
    if (count == 4) break; //means all ids are assigned
    idIndex = (idIndex + 1) % 4;
    count++;
  }

  if (count == 4) clients.set(id, Math.floor(Math.random() * 100) + 5); //if all ids are taken, assigns random id from 5 to 100

  clients.set(id, idIndex + 1);
  idCheck[idIndex] = true;
  idIndex = (idIndex + 1) % 4;
}
